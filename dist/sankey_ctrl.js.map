{"version":3,"sources":["../src/sankey_ctrl.js"],"names":["MetricsPanelCtrl","_","kbn","TimeSeries","rendering","legend","SankeyCtrl","$scope","$injector","$rootScope","hiddenSeries","panelDefaults","show","values","links","datasource","maxDataPoints","interval","targets","cacheTimeout","nullPointMode","legendType","aliasColors","format","valueName","strokeWidth","fontSize","combine","threshold","label","defaults","panel","events","on","onRender","bind","onDataReceived","onDataError","onInitEditMode","addEditorTab","unitFormats","getUnitFormats","subItem","value","render","series","color","alias","data","parseSeries","map","serie","i","split","length","stats","colors","dataList","seriesHandler","seriesData","props","isEmpty","keyList","Object","keys","keyListLength","aliasName","console","log","datapoints","flotpairs","getFlotPairs","target","isNumber","decimals","scaledDecimals","delta","dec","Math","floor","LN10","magn","pow","norm","size","result","max","decimalInfo","getDecimalsForValue","formatFunc","valueFormats","scope","elem","attrs","ctrl","templateUrl"],"mappings":"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","file":"sankey_ctrl.js","sourcesContent":["import {MetricsPanelCtrl} from 'app/plugins/sdk';\nimport _ from 'lodash';\nimport kbn from 'app/core/utils/kbn';\nimport TimeSeries from 'app/core/time_series';\nimport rendering from './rendering';\nimport legend from './legend';\n\nexport class SankeyCtrl extends MetricsPanelCtrl {\n\n  constructor($scope, $injector, $rootScope) {\n    super($scope, $injector);\n    this.$rootScope = $rootScope;\n    this.hiddenSeries = {};\n\n    var panelDefaults = {\n      legend: {\n        show: true, // disable/enable legend\n        values: true\n      },\n      links: [],\n      datasource: null,\n      maxDataPoints: 3,\n      interval: null,\n      targets: [{}],\n      cacheTimeout: null,\n      nullPointMode: 'connected',\n      legendType: 'Under graph',\n      aliasColors: {},\n      format: 'short',\n      valueName: 'current',\n      strokeWidth: 1,\n      fontSize: '80%',\n      combine: {\n        threshold: 0.0,\n        label: 'Others'\n      }\n    };\n\n    _.defaults(this.panel, panelDefaults);\n    _.defaults(this.panel.legend, panelDefaults.legend);\n\n    this.events.on('render', this.onRender.bind(this));\n    this.events.on('data-received', this.onDataReceived.bind(this));\n    this.events.on('data-error', this.onDataError.bind(this));\n    this.events.on('data-snapshot-load', this.onDataReceived.bind(this));\n    this.events.on('init-edit-mode', this.onInitEditMode.bind(this));\n  }\n\n  onInitEditMode() {\n    this.addEditorTab('Options', 'public/plugins/sankey-panel/editor.html', 2);\n    this.unitFormats = kbn.getUnitFormats();\n  }\n\n  setUnitFormat(subItem) {\n    this.panel.format = subItem.value;\n    this.render();\n  }\n\n  onDataError() {\n    this.series = [];\n    this.render();\n  }\n\n  changeSeriesColor(series, color) {\n    series.color = color;\n    this.panel.aliasColors[series.alias] = series.color;\n    this.render();\n  }\n\n  onRender() {\n    this.data = this.parseSeries(this.series);\n  }\n\n  parseSeries(series) {\n    return _.map(this.series, (serie, i) => {\n        if(serie.alias.split(\"---\").length >= 2){\n          return {\n            label: serie.alias,\n            data: serie.stats[this.panel.valueName],\n            color: this.panel.aliasColors[serie.alias] || this.$rootScope.colors[i]\n          }; \n        } else {\n           return {}; \n        }\n      \n    });\n  }\n\n  onDataReceived(dataList) {\n    this.series = dataList.map(this.seriesHandler.bind(this));\n    this.data = this.parseSeries(this.series);\n    this.render(this.data);\n  }\n\n  seriesHandler(seriesData) {\n      if(seriesData.props && !_.isEmpty(seriesData.props)){\n        var keyList = Object.keys(seriesData.props);\n        var keyListLength = keyList.length;\n        if (keyListLength >= 2 ) {\n          var aliasName='';\n          for (var i = 0; i < keyListLength; i++) {\n            if(i === 0){\n              aliasName=keyList[i]+\":\"+seriesData.props[keyList[i]];\n            } else { \n              aliasName = aliasName + \"---\" + keyList[i]+\":\"+seriesData.props[keyList[i]];\n            }\n          }\n          console.log(aliasName);\n            \n          var series = new TimeSeries({\n            datapoints: seriesData.datapoints,\n            alias: aliasName\n          });\n          series.flotpairs = series.getFlotPairs(this.panel.nullPointMode);\n          return series;\n        }\n      }\n    var series = new TimeSeries({\n      datapoints: seriesData.datapoints,\n      alias: seriesData.target\n    });\n\n    series.flotpairs = series.getFlotPairs(this.panel.nullPointMode);\n    return series;\n  }\n\n  getDecimalsForValue(value) {\n    if (_.isNumber(this.panel.decimals)) {\n      return { decimals: this.panel.decimals, scaledDecimals: null };\n    }\n\n    var delta = value / 2;\n    var dec = -Math.floor(Math.log(delta) / Math.LN10);\n\n    var magn = Math.pow(10, -dec);\n    var norm = delta / magn; // norm is between 1.0 and 10.0\n    var size;\n\n    if (norm < 1.5) {\n      size = 1;\n    } else if (norm < 3) {\n      size = 2;\n      // special case for 2.5, requires an extra decimal\n      if (norm > 2.25) {\n        size = 2.5;\n        ++dec;\n      }\n    } else if (norm < 7.5) {\n      size = 5;\n    } else {\n      size = 10;\n    }\n\n    size *= magn;\n\n    // reduce starting decimals if not needed\n    if (Math.floor(value) === value) { dec = 0; }\n\n    var result = {};\n    result.decimals = Math.max(0, dec);\n    result.scaledDecimals = result.decimals - Math.floor(Math.log(size) / Math.LN10) + 2;\n\n    return result;\n  }\n\n  formatValue(value) {\n    var decimalInfo = this.getDecimalsForValue(value);\n    var formatFunc = kbn.valueFormats[this.panel.format];\n    if (formatFunc) {\n      return formatFunc(value, decimalInfo.decimals, decimalInfo.scaledDecimals);\n    }\n    return value;\n  }\n\n  link(scope, elem, attrs, ctrl) {\n    rendering(scope, elem, attrs, ctrl);\n  }\n\n  toggleSeries(serie) {\n    if (this.hiddenSeries[serie.label]) {\n      delete this.hiddenSeries[serie.alias];\n    } else {\n      this.hiddenSeries[serie.label] = true;\n    }\n    this.render();\n  }\n}\n\nSankeyCtrl.templateUrl = 'module.html';\n"]}